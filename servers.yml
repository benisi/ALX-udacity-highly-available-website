Description: > 
  Project 1: Server setup

Parameters: 
  EnvironmentName:
    Description: Name of the environment used to reference exported output
    Type: String

Resources:
  LbSercurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http request to the load balancer
      VpcId: 
        Fn::ImportValue: 
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
  WebServerSercurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http request to the web server
      VpcId: 
        Fn::ImportValue: 
          !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      ImageId: ami-005de95e8ff495156
      InstanceType: t3.medium
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          echo "it works! Udagram, Udacity" > index.html
      SecurityGroups:
        - Ref: WebServerSercurityGroup
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PRIV-SUB-LIST
      LaunchConfigurationName: !Ref WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '4'
      TargetGroupARNs:
        - !Ref WebAppTargetGroup

  WebAppLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB1-SN
        - Fn::ImportValue: !Sub ${EnvironmentName}-PUB2-SN
      SecurityGroups:
        - !Ref LbSercurityGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      LoadBalancerArn:  !Ref WebAppLoadBalancer
      Port: 80
      Protocol: HTTP
  AlbListenerRules: 
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn: !Ref Listener
      Priority: 1
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 18
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
Outputs: 
  LoadBalancerUrl:
    Description: The URL of the ALB
    Value: !Join ['', ['http://', !GetAtt WebAppLoadBalancer.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LB-URL